//===== 熊貓模擬器 (PandasWS/Pandas) 文件 ====================
//= 事件標籤 (Npc Event) 說明文件
//===== 維護人員 =============================================
//= 熊貓模擬器開發團隊
//===== 最後更新 =============================================
//= 20220514 (不一定準)
//===== 文件描述 =============================================
//= 此文件對熊貓模擬器新增的自定義事件標籤進行了說明, 包括這些
//= 事件的觸發時機、關聯玩家、可能的返回引數等.
//============================================================

事件名稱約定:
	On[事件關聯到的物件][事件名稱][事件型別]

事件關聯到的物件:
	是指到時候事件被觸發時指令碼會關聯到哪個物件上執行:
	- PC		表示玩家(最常見)

事件名稱:
	只事件的名字, 通常只是起到區分作用

事件型別:
	- Event		常規事件, 阻塞將進入事件佇列, 不可打斷
	- Filter	過濾事件, 立即執行, 可被打斷
	- Express	實時事件, 立即執行, 不可打斷

//============================================================
// 改進 rAthena 官方事件
//============================================================

*OnSellItem:

當某個 NPC 使用 callshop 指令開啟商店, 且玩家在商店裡面出售自己的道具時, 
此 NPC 的 OnSellItem 標籤(存在時)將會被觸發.

攜帶引數:
	除了 rAthena 自帶的引數外, Pandas 拓展了以下陣列:
	@sold_idx[]		用於儲存被出售的物品在玩家身上的揹包序號

注意事項:
	- 此事件為 rAthena 官方事件, 具體用法請參考 doc/script_commands.txt



//============================================================
// 常規事件 (AKA: 普通事件)
//============================================================
// 執行常規事件的時候若當前玩家正在與 NPC 對話,
// 那麼本次事件將會壓入事件佇列暫緩執行,
// 直到玩家與 NPC 的對話完結之後才會挨個順序觸發.
//
// 整個 rAthena 官方自帶的事件都屬於這一類. 事件佇列容量有限,
// 若佇列滿了那麼後來的事件將被拋棄.
//============================================================

*OnPCIdentifyEvent:

當玩家成功鑑定了裝備時觸發事件

事件關聯:
	關聯到發起鑑定的玩家

中斷關聯:
	若玩家鑑定裝備時在 OnPCIdentifyFilter 事件中使用了 processhalt
	指令打斷了後續流程, 那麼此事件將不會被觸發.

攜帶引數:
	@identify_idx	已被玩家成功鑑定的道具揹包序號

--------------------------------------------------------------

*OnPCInsertCardEvent:

當玩家成功插入卡片後觸發事件

事件關聯:
	關聯到剛剛完成插卡的玩家

攜帶引數:
	@insert_equip_idx	剛剛成功插卡的裝備揹包序號
	@insert_card_idx	剛剛被插卡消耗掉的卡片揹包序號 (注意: 此時的卡片已被刪除)
	@insert_card_id		剛剛被插入的卡片物品編號
	@insert_card_slot	剛剛被插入卡片的卡槽編號 ( 0 - 第一個卡槽; 3 - 第四個卡槽 )

注意事項:
	此事件只有成功完成插卡後才會被觸發, 插卡失敗是不會觸發的
	不過插卡失敗的情況一般幾乎不可能發生, 可以安心使用
	
	@insert_card_idx 引數指向的揹包序號在極端情況下將不可信

--------------------------------------------------------------

*OnPCUseItemEvent:

當玩家成功使用非裝備類道具後觸發事件

事件關聯:
	關聯到成功使用了道具的玩家

攜帶引數:
	@useitem_idx	剛剛被使用的道具揹包序號 (注意: 此時的道具可能已被消耗)
	@useitem_nameid	剛剛被使用的道具編號

注意事項:
	@useitem_idx 引數指向的揹包序號在極端情況下將不可信
	本事件與 rAthenaCN 老版本的同名事件含義不同, 請指令碼編寫人員留意

--------------------------------------------------------------

*OnPCUseSkillEvent:

當玩家成功使用技能後觸發事件 (技能需成功詠唱完畢)

事件關聯:
	關聯到成功使用了技能的玩家

攜帶引數:
	@useskill_id			剛剛施放的技能編號
	@useskill_lv			剛剛施放的技能等級
	@useskill_target_gid	被施法目標的 GameID, 若為 0 則表示這是個地面技能
	@useskill_pos_x			剛剛被施法的地面 X 座標
	@useskill_pos_y			剛剛被施法的地面 Y 座標

注意事項:
	模擬器內部的技能實現流程比較長, 手動測試無法覆蓋全部分支.
	若您發現自己關心的某個技能使用後該事件沒被觸發的話,
	可以前往 https://github.com/PandasWS/Pandas 提交 Issue 進行反饋.

修訂記錄:
	v1.1.2	- 技能需要詠唱完畢才會觸發此事件

--------------------------------------------------------------

*OnPCKillMvpEvent:

當玩家殺死 MVP 魔物後觸發事件

事件關聯:
	關聯到給予 MVP 魔物最後一擊的玩家

攜帶引數:
	killedrid			被殺魔物的型別編號 (魔物編號)
	killedgid			被殺魔物的遊戲單位編號 (GameID)
	
	@mob_dead_x			魔物死亡時所處的 X 座標
	@mob_dead_y			魔物死亡時所處的 Y 座標
	@mob_lasthit_rid	給予魔物最後一擊的角色的遊戲單位編號 (GameID)
	@mob_lasthit_cid	給予魔物最後一擊的角色編號
	@mob_mvp_rid		本次 MVP 角色的遊戲單位編號 (GameID)
	@mob_mvp_cid		本次 MVP 角色的角色編號

修訂記錄:
	v1.1.1	- 增加 killedgid 攜帶引數

--------------------------------------------------------------

*OnPCEquipEvent:

當玩家成功穿戴一件裝備時觸發事件
當玩家執行"裝備切換"將"待用裝備"轉正為"生效裝備"成功後也會觸發事件

事件關聯:
	關聯到穿戴裝備的玩家

攜帶引數:
	@equip_idx		玩家穿戴的裝備揹包序號
	@equip_swapping	本次穿戴是否由於"裝備切換"而觸發的

裝備切換:
	新的仙境傳說客戶端支援"裝備切換"機制,
	此時如果單獨將裝備拖動到裝備面板的"待切換裝備"視窗中進行登記,
	不會觸發此事件 (因為此時裝備並未實際穿戴).

--------------------------------------------------------------

*OnPCUnequipEvent:

當玩家成功脫下一件裝備時觸發事件
用一個新裝備去替換位置相同且已穿戴的"生效裝備", 導致它被成功脫下時也會觸發過濾器

事件關聯:
	關聯到脫下裝備的玩家

攜帶引數:
	@unequip_idx		玩家成功脫下的裝備揹包序號
	@unequip_swapping	本次脫下是否由於"裝備切換"而觸發的
	@unequip_force		本次脫下是否由某個需要強制脫下的內部邏輯產生的

裝備切換:
	新的仙境傳說客戶端支援"裝備切換"機制,
	此時如果單獨將裝備從到裝備面板的"待用裝備"視窗中拖離移除,
	不會觸發此過濾器 (因為此時裝備並未實際脫下).

強制脫下說明:
	- 角色轉職的時候, 若穿戴的裝備已經不符合新職業的要求, 那麼裝備將被強制脫下.
	- 當精煉道具時, 已經裝備就會被強制脫下, 以便進行精煉.
	- @dropall @storeall @changesex @changecharsex @fullstrip 等指令也會觸發裝備的強制脫下.

注意事項:
	當 @unequip_swapping 為 1 時, "生效裝備"實際上只是和"待用裝備"
	進行了交換, 並未直接脫下到揹包中.

	替換位置相同的"生效裝備"時, 引數 @unequip_swapping 的值為 0.

千萬注意:
	當程式內部邏輯需要強制脫下某件裝備時, @unequip_force 將為 1,
	當它為 1 的時候請不要使用 processhalt 打斷後續流程, 或刪除即將被操作的裝備.
	因為這可能引發各種奇怪的問題.
	
	比如: 當替換裝備的時候相同位置的老裝備應該被強制脫下, 
	如果此時打斷後續流程, 那麼新穿戴的裝備雖然可以成功穿戴,
	但是老的裝備的"脫下指令碼"就不會被觸發.

--------------------------------------------------------------

*OnPCJobChangeEvent:

當玩家成功轉換職業後觸發事件

事件關聯:
	關聯到轉換職業的玩家

攜帶引數:
	@previous_job		轉職之前的職業編號
	@current_job		轉職之後當前的職業編號


//============================================================
// 熊貓模擬器 - 過濾事件 (過濾器事件)
//============================================================
// 過濾事件通常在伺服器一些關鍵的節點觸發,
// 可以用 processhalt 指令碼指令打斷, 打斷後將影響後續工作流.
// 
// 從 v1.1.1 版本開始:
// ---------------------------------------
// 過濾事件一旦觸發會被立刻執行! 哪怕玩家正在和 NPC 對話,
// 也不會被壓入事件佇列暫緩執行.
// 
// 過濾事件預設禁止使用[需要等待玩家進行後續動作]的指令:
// mes, next, close, close2, menu, select, prompt, input,
// openstorage, guildopenstorage, produce, cooking, birthpet,
// callshop, sleep, sleep2, openmail, openauction, progressbar,
// buyingstore, makerune, opendressroom, openstorage2
//
// 若您知道可能潛在的副作用且堅持需要使用上述任何一個指令,
// 可以使用 'unlockcmd' 指令碼指令來解鎖限制.
// 
// 任何過濾事件觸發時都將自動攜帶 @interrupt_npcid 引數,
// 作者可以透過 @interrupt_npcid 引數來獲取當前過濾事件觸發時
// 玩家正在與哪個 NPC 對話 (遊戲單位編號).
// 值為 0 表示沒有打斷玩家, 那你可以隨意使用 mes 等指令.
//============================================================

*OnPCIdentifyFilter:

當玩家在裝備鑑定列表中選擇好裝備, 並點選"確定"按鈕時觸發過濾器

事件關聯:
	關聯到發起鑑定的玩家

中斷說明: 
	中斷後會無視玩家本次鑑定道具的請求, 系統不再鑑定此裝備

攜帶引數:
	@identify_idx	被玩家選擇進行鑑定的道具揹包序號

--------------------------------------------------------------

*OnPCInChatroomFilter:

當玩家雙擊進入 NPC 開啟的聊天室時將觸發過濾器

事件關聯:
	關聯到進入聊天室的玩家

中斷關聯:
	中斷後客戶端將不會開啟聊天室視窗
	
注意事項:
	只會觸發建立聊天室的 NPC 名下的過濾器事件,
	其他 NPC 使用的 OnPCInChatroomFilter 過濾器不會被觸發
	
	此外需要注意的是 rAthena 自帶的 waitingroom 指令有一個 "<event label>" 事件,
	當聊天室中的成員數量足夠時就會被觸發. 若您在本過濾器中使用 processhalt
	指令打斷了後續流程, 那麼 waitingroom 的事件將不會被觸發.

--------------------------------------------------------------

*OnPCInsertCardFilter:

當玩家準備插入卡片時觸發過濾器

事件關聯:
	關聯到準備插卡的玩家

中斷關聯:
	中斷後服務端會無視玩家本次插入卡片的操作

攜帶引數:
	@insert_equip_idx	即將被插卡的裝備揹包序號
	@insert_card_idx	即將被插入的卡片揹包序號
	@insert_card_id		即將被插入的卡片物品編號
	@insert_card_slot	即將被插入卡片的卡槽編號 ( 0 - 第一個卡槽; 3 - 第四個卡槽 )

--------------------------------------------------------------

*OnPCUseItemFilter:

當玩家準備使用非裝備類道具時觸發過濾器

事件關聯:
	關聯到準備使用道具的玩家

中斷關聯:
	中斷後服務端會無視玩家本次使用道具的操作

攜帶引數:
	@useitem_idx	即將被使用的道具揹包序號
	@useitem_nameid	即將被使用的道具編號

--------------------------------------------------------------

*OnPCUseSkillFilter:

當玩家準備使用技能時觸發過濾器

事件關聯:
	關聯到準備使用技能的玩家

中斷說明:
	中斷後服務端會無視玩家本次使用技能的請求

攜帶引數:
	@useskill_id			即將施放的技能編號
	@useskill_lv			即將施放的技能等級
	@useskill_target_gid	被施法目標的 GameID, 若為 0 則表示這是個地面技能
	@useskill_pos_x			即將被施法的地面 X 座標
	@useskill_pos_y			即將被施法的地面 Y 座標

注意事項:
	為了方便利用事件實現一些技能, 本過濾器的觸發時機非常早,
	就算玩家被 setpcblock 設定為禁用技能, 此過濾器也能夠被觸發.
	
	此過濾器觸發時, 技能詠唱及施法條件判斷、材料扣除等尚未發生.

修訂記錄:
	v1.1.20	- 支援打斷 unitskilluseid 發起的玩家詠唱技能
	        - 支援打斷 unitskillusepos 發起的玩家詠唱技能

--------------------------------------------------------------

*OnPCOpenRouletteFilter:

當玩家準備開啟樂透大轉盤的時候觸發過濾器

事件關聯:
	關聯到準備開啟樂透大轉盤的玩家

中斷說明:
	中斷後服務端會無視本次開啟樂透大轉盤的請求

注意事項:
	該過濾器的觸發必須依賴一些條件, 若條件不匹配則不會被觸發:
	- 客戶端必須是 2014-10-22 或更新的版本
	- 若當前正在與 NPC 進行對話, 那麼此過濾器將不會被觸發
	
	為了進一步最佳化體驗, Pandas 對大樂透按鈕的點選邏輯進行了調整:
	正在和 NPC 對話時將禁止點選大樂透按鈕按鈕 (與 rAthena 有所不同)

--------------------------------------------------------------

*OnPCViewEquipFilter:

當玩家準備檢視某個角色的裝備時觸發過濾器

事件關聯:
	關聯到發起檢視請求的玩家

中斷說明:
	中斷後服務端會無視本次檢視他人裝備的請求

攜帶引數:
	@view_equip_target_name$	被檢視角色的角色名
	@view_equip_target_cid		被檢視角色的角色編號
	@view_equip_target_aid		被檢視角色的賬號編號
	@view_equip_target_allowed	被檢視角色是否允許其他人看他的裝備
	@view_equip_bypass_limit	是否繞過所有限制直接允許檢視 (可賦值引數, 設為 1 則表示繞過)
								若你在事件中將此變數改成 1 的話, 那麼除非被 processhalt 打斷,
								否則不管對方是否允許你看裝備, 你都可以直接看

注意事項:
	- 使用 viewequip 指令碼指令也會觸發此過濾器
	- 從 1.1.13 版本開始, 哪怕是對方不允許你檢視裝備, 此過濾器也能夠被觸發

--------------------------------------------------------------

*OnPCEquipFilter:

當玩家準備穿戴裝備時觸發過濾器
當玩家執行"裝備切換"將"待用裝備"轉正為"生效裝備"時也會觸發過濾器

事件關聯:
	關聯到即將穿戴裝備的玩家

中斷說明:
	中斷後服務端會無視玩家本次穿戴操作
	若 @equip_swapping 為 1 時, 使用 processhalt 是無效的

攜帶引數:
	@equip_idx		玩家即將穿戴的裝備揹包序號
	@equip_swapping	本次穿戴是否由於"裝備切換"而觸發的

裝備切換:
	新的仙境傳說客戶端支援"裝備切換"機制,
	此時如果單獨將裝備拖動到裝備面板的"待用裝備"視窗中進行登記,
	不會觸發此過濾器 (因為此時裝備並未實際穿戴).

注意事項:
	若玩家身上已穿戴一件相同位置的裝備,
	那麼過濾器被觸發時用 processhalt 打斷了穿戴本裝備的後續過程,
	角色身上的原穿戴的裝備也不會被脫下.

	當玩家穿戴一件未被繫結的裝備, 並在客戶端中確認執行繫結後,
	在過濾器中用 processhalt 打斷後續過程, 裝備也將維持最初的未繫結狀態.

	執行該過濾器時, 裝備實際上還未穿戴上, 因此在該事件的觸發指令碼中使用
	getinventoryinfo(@equip_idx, 2) 嘗試獲取該裝備的穿戴位置時獲取的值永為 0

--------------------------------------------------------------

*OnPCUnequipFilter:

當玩家準備脫下裝備時觸發過濾器
用一個新裝備去替換位置相同且已穿戴的"生效裝備"時也會觸發過濾器

事件關聯:
	關聯到即將脫下裝備的玩家

中斷關聯:
	中斷後服務端會無視玩家本次脫下操作
	若 @unequip_swapping 為 1 時, 使用 processhalt 是無效的

攜帶引數:
	@unequip_idx		玩家即將脫下的裝備揹包序號
	@unequip_swapping	本次脫下是否由於"裝備切換"而觸發的
	@unequip_force		本次脫下是否由某個需要強制脫下的內部邏輯產生的

裝備切換:
	新的仙境傳說客戶端支援"裝備切換"機制,
	此時如果單獨將裝備從到裝備面板的"待用裝備"視窗中拖離移除,
	不會觸發此過濾器 (因為此時裝備並未實際脫下).

強制脫下說明:
	- 角色轉職的時候, 若穿戴的裝備已經不符合新職業的要求, 那麼裝備將被強制脫下.
	- 當精煉道具時, 已經裝備就會被強制脫下, 以便進行精煉.
	- @dropall @storeall @changesex @changecharsex @fullstrip 等指令也會觸發裝備的強制脫下.

注意事項:
	當 @unequip_swapping 為 1 時, "生效裝備"實際上只是和"待用裝備"
	進行了交換, 並未直接脫下到揹包中.

	替換位置相同的"生效裝備"時, 引數 @unequip_swapping 的值為 0.

	執行該過濾器時, 裝備實際上還未脫下, 因此在該事件的觸發指令碼中使用
	getinventoryinfo(@equip_idx, 2) 嘗試獲取該裝備的穿戴位置時獲取的值通常不是 0

千萬注意:
	當程式內部邏輯需要強制脫下某件裝備時, @unequip_force 將為 1,
	當它為 1 的時候請不要使用 processhalt 打斷後續流程, 或刪除即將被操作的裝備.
	因為這可能引發各種奇怪的問題.
	
	比如: 當替換裝備的時候相同位置的老裝備應該被強制脫下, 
	如果此時打斷後續流程, 那麼新穿戴的裝備雖然可以成功穿戴,
	但是老的裝備的"脫下指令碼"就不會被觸發.

--------------------------------------------------------------

*OnPCChangeTitleFilter:

事件描述: 
	當玩家即將變更稱號時將觸發過濾器
	
事件關聯:
	關聯到稱號變更的玩家

中斷說明:
	中斷後服務端會無視玩家本次修改稱號的操作,
	也不會根據 @target_title_id 變數的值來設定玩家的稱號
	
	鑑於 @target_title_id 是可被修改的
	所以你可以用直接修改 @target_title_id 的方式來篡改最終的稱號ID
	但是要注意, 採用這種方法的話, 後面別跟 processhalt;

攜帶引數:
	@trigger_mode
		0 - 透過裝備面板觸發
		1 - 透過 setchartitle 指令碼指令觸發
		2 - 透過 @title 管理員指令觸發

	@target_title_id	即將變更成的目標稱號ID (該值可被修改)
	@pre_title_id	之前的稱號ID是多少

注意事項:
	當 @trigger_mode 為 0 時, 若 @target_title_id 引數的值也為 0,
	則表示玩家雙擊了 "Title Release" (或翻譯成"Disable Title")

相容提醒:
	此過濾器的一些細節與 rAthenaCN v1.8.0 版本存在差異, 可能會有不相容情況
	請酌情修改之前的老指令碼, 以便使指令碼可以正常工作.

	- 取消了事件別名: OnPCChangeTitleEvent
	- @new_title_id 改名為 @target_title_id (@new_title_id 將不再被賦值)

--------------------------------------------------------------

*OnPCBuffStartFilter:

事件描述: 
	當玩家即將獲得一個狀態(Buff)時觸發過濾器
	
事件關聯:
	關聯到即將獲得狀態的玩家

中斷說明:
	中斷後服務端會無視玩家本次獲得狀態的請求

攜帶引數:
	@about2start_sc_id		該狀態的編號
	@about2start_sc_rate	該狀態的觸發機率(10000 = 100%, 該值可被修改)
	@about2start_sc_tick	該狀態的持續時長(單位為毫秒, 該值可被修改)
							時長根據內部實現方式的不同, 有可能是指多長時間後剩餘秒數減一
	@about2start_sc_val1	該狀態的第1個引數的值 (該值可被修改)
	@about2start_sc_val2	該狀態的第2個引數的值 (該值可被修改)
	@about2start_sc_val3	該狀態的第3個引數的值 (該值可被修改)
	@about2start_sc_val4	該狀態的第4個引數的值 (該值可被修改)

注意事項:
	若 @about2start_sc_rate 或 @about2start_sc_tick 被改寫成 0 則視為執行中斷
	若 @about2start_sc_tick 設為 -1 則表示無限時長

--------------------------------------------------------------

*OnPCUseOCIdentifyFilter:

當玩家使用一鍵鑑定道具時觸發過濾器.

事件關聯:
	關聯到執行一鍵鑑定的玩家

中斷說明:
	中斷後服務端會無視玩家本次進行一鍵鑑定的請求

攜帶引數:
	@identify_idx	被玩家選擇進行鑑定的道具揹包序號

注意事項:
	此過濾器在觸發的時候並未確保 @identify_idx 揹包序號所指向的道具 100% 存在並且有效,
	也並未檢查揹包中是否存在放大鏡道具 (客戶端會檢測一次).
	因此請在必要的時候請自己進行額外判斷.

--------------------------------------------------------------

*OnPCUseReviveTokenFilter

當玩家使用選單中的原地復活之證時觸發過濾器.

事件關聯:
	關聯到執行原地復活的玩家

中斷說明:
	中斷後服務端會無視玩家本次復活操作

--------------------------------------------------------------

*OnPCGuildCreateFilter:

當玩家準備建立公會時觸發過濾器 [聽風]

事件關聯:
	關聯到準備建立公會的玩家

中斷關聯:
	中斷後服務端會無視玩家本次建立公會的操作

攜帶引數:
	@create_guild_name$	要建立的公會名稱

--------------------------------------------------------------

*OnPCGuildJoinFilter:

當玩家即將加入公會時觸發過濾器 [聽風]

事件關聯:
	關聯加入公會的玩家

中斷關聯:
	中斷後服務端會無視玩家本次加入公會的操作

攜帶引數:
	@join_guild_id		公會ID
	@join_guild_aid		邀請者的AID

--------------------------------------------------------------

*OnPCGuildLeaveFilter:

當玩家準備離開公會時觸發過濾器 [聽風]

事件關聯:
	自願離開公會的關聯到離開公會的玩家
	會長踢出公會的關聯到會長

中斷說明:
	中斷後玩家離開公會失敗

攜帶引數:
	@left_guild_id		公會ID
	@left_guild_name$	公會名稱
	@left_guild_kick	是否是被會長踢出 (0 - 玩家自己退出公會; 1 - 被會長從公會驅逐)
	@left_guild_aid		離開公會玩家的賬號編號

--------------------------------------------------------------

*OnPCPartyCreateFilter:

當玩家準備建立隊伍時觸發過濾器 [聽風]

事件關聯:
	關聯到準備建立隊伍的玩家

中斷關聯:
	中斷後服務端會無視玩家本次建立隊伍的操作

攜帶引數:
	@create_party_name$	要建立的隊伍名稱

--------------------------------------------------------------

*OnPCPartyJoinFilter:

當玩家即將加入隊伍時觸發過濾器 [聽風]

事件關聯:
	關聯到即將加入隊伍的玩家

中斷關聯:
	中斷後服務端會無視玩家本次加入隊伍的操作

攜帶引數:
	@join_party_id		隊伍編號
	@join_party_aid		隊長的賬號編號

注意事項:
	僅在被邀請的玩家同意加入隊伍時過濾器才會觸發


--------------------------------------------------------------

*OnPCPartyLeaveFilter:

當玩家準備離開隊伍時觸發過濾器 [聽風]

事件關聯:
	若是玩家自願離開隊伍的, 則關聯到離開隊伍的玩家
	若是被隊長踢出隊伍的, 則關聯到隊長

中斷說明:
	中斷後服務端會無視玩家本次離開隊伍的請求

攜帶引數:
	@left_party_id		隊伍編號
	@left_party_name$	隊伍名稱
	@left_party_kick	是否是被隊長踢出 (0 - 自願退出隊伍; 1 - 被隊長驅逐)
	@left_party_aid		即將離開隊伍的角色所對應的賬號編號

--------------------------------------------------------------

*OnPCDropItemFilter:

當玩家準備丟棄或掉落道具時觸發過濾器 [人魚姬的思念]

事件關聯:
	關聯到即將丟棄或掉落道具的玩家

中斷說明:
	中斷後服務端會無視本次掉落請求

攜帶引數:
	@drop_idx			丟棄或掉落道具的揹包序號
	@drop_itemid		丟棄或掉落道具的物品編號
	@drop_amount		丟棄或掉落道具的數量

注意事項:
	玩家在 PVP 夢魘模式被擊殺導致掉落裝備時, 也會觸發此過濾器.
	
	哪怕不中斷此過濾器, 後續也會有其他判斷條件可能會導致最終無法掉落此道具,
	例如: 玩家所在地圖存在 nodrop 地圖示記.

--------------------------------------------------------------

*OnPCClickTombFilter:

當玩家點選魔物墓碑時觸發過濾器 [人魚姬的思念]

事件關聯:
	關聯到點選墓碑的玩家

中斷說明:
	中斷後服務端會無視系統預設的墓碑對話方塊

攜帶引數:
	@tomb_mapid				墓碑所在的地圖編號
	@tomb_mapname$			墓碑所在的地圖名稱
	@tomb_x					墓碑所在的 X 座標
	@tomb_y					墓碑所在的 Y 座標

	@tomb_gid				墓碑 NPC 的遊戲單位編號
	@tomb_createtime		墓碑的建立時間 (Unix 時間戳)

	@tomb_mob_gid			死亡 MVP 魔物的遊戲單位編號
	@tomb_mob_classid		死亡 MVP 魔物的魔物編號
	@tomb_mob_respawnsecs	死亡 MVP 魔物將在幾秒鐘之後重新整理復活
	@tomb_mob_respawntime	死亡 MVP 魔物的復活時間 (Unix 時間戳, 讀取不到則為 -1)

	@tomb_killer_name$		擊殺 MVP 魔物的玩家名稱
	@tomb_killer_gid		擊殺 MVP 魔物的玩家遊戲單位編號

--------------------------------------------------------------

*OnPCStorageAddFilter:

當玩家準備將道具存入倉庫時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具存入倉庫的玩家

中斷說明:
	中斷後服務端會無視本次存入道具的請求

攜帶引數:
	@storeitem_src_from		即將存入的道具來源 (1: 揹包; 2: 手推車)
	@storeitem_src_idx		即將存入的道具序號
							若在從揹包來則是揹包序號, 若從手推車來則是手推車中的物品序號
	@storeitem_src_nameid	即將存入的道具編號
	@storeitem_src_amount	即將存入的道具數量
	
	@storeitem_dst_type		計劃將其存放到的目標倉庫型別 (1: 個人倉庫; 2: 公會倉庫)
	@storeitem_dst_storeid	計劃將其存放到的目標倉庫編號
							對於公會倉庫而言, 此選項的值無意義 (固定為 0).
							當我們在 conf/inter_server.yml 中定義多個玩家個人倉庫,
							並使用 openstorage2 指令開啟它們進行物品存放的時候,
							可以透過倉庫編號區分玩家將道具放到了哪個倉庫.

注意事項:
	此事件觸發時無法確保玩家最終的道具一定就能夠被成功儲存到倉庫,
	因此在撰寫指令碼的時候不能以此為假設.

--------------------------------------------------------------

*OnPCStorageDelFilter:

當玩家準備將道具取出倉庫時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具取出倉庫的玩家

中斷說明:
	中斷後服務端會無視本次取出道具的請求

攜帶引數:
	@removeitem_src_from		即將取出的道具來源倉庫型別 (1: 個人倉庫; 2: 公會倉庫)
	@removeitem_src_storeid		即將取出的道具來源倉庫編號
								對於公會倉庫而言, 此選項的值無意義 (固定為 0).
								當我們在 conf/inter_server.yml 中定義多個玩家個人倉庫,
								並使用 openstorage2 指令開啟它們進行物品取出的時候,
								可以透過倉庫編號區分玩家從哪個倉庫取出了道具.
	@removeitem_src_idx			即將取出的道具索引序號
	@removeitem_src_nameid		即將取出的道具編號
	@removeitem_src_amount		即將取出的道具數量

	@removeitem_dst_type		計劃將其存放到的目的地 (1: 揹包; 2: 手推車)

注意事項:
	此事件觸發時無法確保玩家最終的道具一定就能夠成功從倉庫中取出,
	因此在撰寫指令碼的時候不能以此為假設.

--------------------------------------------------------------

*OnPCCartAddFilter:

當玩家準備將道具從揹包存入手推車時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具從揹包存入手推車的玩家

中斷說明:
	中斷後服務端會無視本次存入道具的請求

攜帶引數:
	@storeitem_nameid	即將存入的道具編號
	@storeitem_amount	即將存入的道具數量
	@storeitem_idx		即將存入的道具序號 (揹包序號)

注意事項:
	此事件觸發時無法確保玩家最終的道具一定就能夠成功從揹包存入手推車,
	因此在撰寫指令碼的時候不能以此為假設.

--------------------------------------------------------------

*OnPCCartDelFilter:

當玩家準備將道具從手推車取回揹包時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具從手推車取回揹包的玩家

中斷說明:
	中斷後服務端會無視本次取回道具的請求

攜帶引數:
	@removeitem_nameid	即將取出的道具編號
	@removeitem_amount	即將取出的道具數量
	@removeitem_idx		即將取出的道具序號 (手推車序號)

注意事項:
	此事件觸發時無法確保玩家最終的道具一定就能夠成功從手推車中取出,
	因此在撰寫指令碼的時候不能以此為假設.

--------------------------------------------------------------

*OnPCFavoriteAddFilter:

當玩家準備將道具移入收藏欄位時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具移入收藏欄位的玩家

中斷說明:
	中斷後服務端會無視本次移動道具的請求

攜帶引數:
	@favorite_nameid	即將移入的道具編號
	@favorite_amount	即將移入的道具數量
	@favorite_idx		即將移入的道具序號 (揹包序號)

--------------------------------------------------------------

*OnPCFavoriteDelFilter:

當玩家準備將道具從收藏欄位移出時觸發過濾器 [香草]

事件關聯:
	關聯到準備將道具移出收藏欄位的玩家

中斷說明:
	中斷後服務端會無視本次移動道具的請求

攜帶引數:
	@unfavorite_nameid	即將移出的道具編號
	@unfavorite_amount	即將移出的道具數量
	@unfavorite_idx		即將移出的道具序號 (揹包序號)

--------------------------------------------------------------

*OnPCRefineUIFilter:

當玩家點選精煉互動介面中的 "精煉" 按鈕時觸發過濾器
可透過修改 @refine_rate 變數來調整精煉成功率 (萬分率, 填寫 10000 表示 100%)

事件關聯:
	關聯到點選 "精煉" 按鈕的玩家

中斷說明:
	中斷後服務端會無視本次精煉請求

攜帶引數:
	@refine_idx			精煉物品的道具揹包序號
	@refine_nameid		精煉物品的道具編號
	@refine_rate		精煉成功率 (萬分率, 返回 10000 表示 100%)
	@refine_zeny		精煉時消耗的金錢
	@refine_cost		精煉時消耗的道具編號
	@refine_blessing	精煉時消耗 "鐵匠的祝福" 的數量 (為 0 表示沒有使用)

注意事項:
	想修改 @refine_rate 的話請不要使用 processhalt 進行中斷,
	否則一旦中斷那麼什麼事情都不會發生.
	
	設定 @refine_rate 調整精煉成功率時請注意, 該變數需要填寫萬分率,
	也就是說填寫 80 等於 0.8% 而不是 80%

--------------------------------------------------------------

*OnPCOpenVendingFilter:

當玩家擺放好道具並開啟露天商店時觸發過濾器

事件關聯:
	關聯到開設露天商店的玩家

中斷說明:
	中斷後服務端會無視本次開設露天商店的請求
	客戶端會看到技能使用失敗的提示

攜帶引數:
	@vending_title$				露天商店名稱

	@vending_currency_type		露天商店的交易貨幣型別

								0 - 沒有開啟露天商店擴充機制
								1 - 貨幣型別為: Zeny
								2 - 貨幣型別為: Cash

	@vending_currency_id		交易貨幣的代表道具編號
								也就是 conf/battle/pro.conf 中
								itemid_for_zeny 和 itemid_for_cash 的值
								
	@vending_count				出售的道具專案總數量
								常用作迴圈遍歷以下陣列時的最大值使用

	@vending_idx[]				數值型陣列, 待售物品的道具序號 (手推車序號)
								可配合使用 getcartinfo 來獲取道具資訊

	@vending_amount[]			數值型陣列, 待售物品的出售數量
								可修改該陣列的值來調整出售數量,
								調整後的數量為 0 那麼該道具將被忽略.
								調整後超過手推車當前該道具的最大數量,
								那麼該道具也會被忽略
	
	@vending_price[]			數值型陣列, 待售物品的出售單價
								可修改該陣列的值來調整出售單價,
								單價可以為 0 但不能超過 vending_max_value
								戰鬥配置選項中指定的最大單價
								
	@vending_ignore[]			數值型陣列, 待售道具是否需要被忽略
								可修改該陣列的值來忽略道具,
								被忽略的道具最終不會被擺攤上架.
								
								設定為 0 表示: 不忽略 (預設)
								設定為 1 表示: 忽略

注意事項:
	離線掛店玩家在地圖伺服器重啟恢復擺攤時, 也會觸發該事件.
	
	若你想利用陣列來修改數量、單價、是否忽略的話,
	請不要使用 processhalt 進行中斷, 否則中斷後什麼事情都不會發生.
	
	當 @vending_currency_type 為 0 表示沒有開啟露天商店擴充機制時,
	預設將使用 Zeny 作為交易貨幣.

--------------------------------------------------------------

*OnPCOpenBuyingFilter:

當玩家設定好求購道具並開啟採購商店時觸發過濾器

事件關聯:
	關聯到開設採購商店的玩家

中斷說明:
	中斷後服務端會無視本次開設採購商店的請求
	客戶端會看到技能使用失敗的提示

攜帶引數:
	@buying_title$				採購商店名稱

	@buying_currency_type		採購商店的交易貨幣型別

								0 - 沒有開啟採購商店擴充機制
								1 - 貨幣型別為: Zeny
								2 - 貨幣型別為: Cash

	@buying_currency_id			交易貨幣的代表道具編號
								也就是 conf/battle/pro.conf 中
								itemid_for_zeny 和 itemid_for_cash 的值
								
	@buying_count				採購的道具專案總數量
								常用作迴圈遍歷以下陣列時的最大值使用

	@buying_nameid[]			數值型陣列, 待採物品的道具編號

	@buying_amount[]			數值型陣列, 待採物品的採購數量
								可修改該陣列的值來調整採購數量,
								調整後的數量為 0 那麼該道具將被忽略.
								採購數量 + 揹包已有道具數量不能超過
								BUYINGSTORE_MAX_AMOUNT (9999) 個,
								否則該道具也會被忽略
	
	@buying_price[]				數值型陣列, 待採物品的採購單價
								可修改該陣列的值來調整採購單價,
								調整後的單價為 0 那麼該道具將被忽略.
								單價不能超過 BUYINGSTORE_MAX_PRICE
								(99990000) 否則該道具也會被忽略
								
	@buying_ignore[]			數值型陣列, 待採道具是否需要被忽略
								可修改該陣列的值來忽略道具,
								被忽略的道具最終不會被擺攤上架.
								
								設定為 0 表示: 不忽略 (預設)
								設定為 1 表示: 忽略

注意事項:
	離線掛店玩家在地圖伺服器重啟恢復擺攤時, 也會觸發該事件.
	
	若你想利用陣列來修改數量、單價、是否忽略的話,
	請不要使用 processhalt 進行中斷, 否則中斷後什麼事情都不會發生.
	
	當 @buying_currency_type 為 0 表示沒有開啟採購商店擴充機制時,
	預設將使用 Zeny 作為交易貨幣.

	若透過該事件調整了採購數量, 導致最終玩家身上放不下這麼多道具,
	那麼會按正常流程認為開啟採購商店失敗.

--------------------------------------------------------------

*OnPCCaptchaFilter:

當玩家即將被驗證時觸發過濾器

此處的 "驗證" 是指被外掛驗證器 (Macro Detector) 挑戰,
要求玩家輸入驗證碼圖片中的字元進行驗證.

事件關聯:
	關聯到被驗證的玩家

中斷說明:
	中斷後服務端會無視本次驗證請求

攜帶引數:
	@captcha_key$				驗證碼的答案

	@captcha_reporter_aid		觸發本次驗證的 GM 賬號編號

								-1 - 使用指令碼指令觸發
								其他非零正整數則表示 GM 的賬號編號

	@captcha_retry				最大重試次數
								可修改此變數來調整本輪驗證中允許玩家
								失敗重試的次數. 不能低於 1
								
	@captcha_timeout			每次驗證的超時時間 (單位為毫秒)
								可修改此變數來調整本輪驗證中每次驗證
								的超時時間. 不能低於 1000

	@captcha_source				驗證碼圖片來源

								0 - 源於 captcha_db.yml 資料庫
								1 - 源於 /macro_register 註冊上傳

--------------------------------------------------------------

*OnPCCaptchaSubmitFilter:

當玩家提交驗證碼時觸發過濾器

事件關聯:
	關聯到提交驗證答案的玩家

中斷說明:
	中斷後服務端會認為本次驗證被放棄,
	不會認為驗證成功, 玩家也不會認為驗證失敗被懲罰

攜帶引數:
	@captcha_key$				驗證碼的答案 (區分大小寫)
	@captcha_answer$			玩家本次提交的驗證碼答案 (區分大小寫)
	@captcha_result				預計本次驗證是否成功 (1 成功; 0 失敗)

	@captcha_retry_before		驗證之前玩家剩餘的重試次數
	@captcha_retry_after		驗證之後玩家剩餘的重試次數
	@captcha_retry_used			驗證之後玩家已經用掉的次數

	@captcha_retry_max			玩家在本輪驗證中的最大重試次數
								可以在 OnPCCaptchaFilter 中透過
								@captcha_retry 變數指定最大重試次數

	@captcha_max_time			本次驗證的超時時間 (單位為毫秒)
								為 macro_detection_timeout 選項的值
	
	@captcha_used_time			本次提交答案所耗費的時間 (單位為毫秒)
	
	@captcha_left_time			本次提交答案時的剩餘時間 (單位為毫秒)

	@captcha_punishment_type	當本次驗證是最後一次機會時,
								若玩家驗證失敗我們計劃執行的懲罰型別.
								可修改此變數來調整懲罰型別 

								0 - 賬號封禁
								1 - 將角色送往監獄地圖
								2 - 使用 OnPCCaptchaPunExpress 進行懲罰

	@captcha_punishment_time	若本次驗證失敗計劃懲罰的時長 (分鐘)
								可修改此變數來調整懲罰時長

--------------------------------------------------------------

*OnPCAddItemFilter:

當玩家即將獲得道具時觸發過濾器 (適用於絕大多數場景)

事件關聯:
	關聯到即將獲得道具的玩家

中斷說明:
	中斷後服務端會根據 @additem_halt_type 來進行後續操作

攜帶引數:
	@additem_nameid				即將獲得的道具編號
	@additem_amount				即將獲得的道具數量
	@additem_have_uid			即將獲得的道具是否應該有唯一編號
	@additem_uid$				即將獲得的道具唯一編號
	
	@additem_from				即將獲得的道具來源
	
								0 - 未知來源
								1 - 透過撿取地面道具獲得
								2 - 成為 MVP 時候的獎勵道具
								3 - 透過偷竊技能得到
								4 - 成功捕捉寵物時得到寵物蛋
								5 - 讓寵物交出吃掉的道具
	
	@additem_halt_type			被打斷之後程式的處理方式, 預設值都是 0
								根據道具來源的不同該引數的值所代表的含義也不同
	
								當 @additem_from = 0 // 未知來源
								
									0 - 認為成功, 但行為不可預期
									1 - 認為失敗, 但行為不可預期
	
								當 @additem_from = 1 // 透過撿取地面道具獲得
								
									0 - 認為撿取成功, 地面道具消失
									1 - 認為撿取失敗, 地面道具不會消失
								
								當 @additem_from = 2 // 成為 MVP 時候的獎勵道具
								
									0 - 認為成功, 該有廣播就正常廣播
									1 - 認為失敗, MVP 獎勵道具掉落到地面
								
								當 @additem_from = 3 // 透過偷竊技能得到
								
									0 - 認為偷竊成功, 該有廣播就正常廣播
									1 - 認為偷竊失敗, 不會掉到地面
								
								當 @additem_from = 4 // 成功捕捉寵物時得到寵物蛋
								
									0 - 認為成功, 什麼都不會發生
									1 - 認為失敗, 寵物蛋會掉落到地面
								
								當 @additem_from = 5 // 讓寵物交出吃掉的道具
								
									0 - 認為成功, 什麼都不會發生
									1 - 認為失敗, 道具會掉落到地面上

使用提示:
	若 @additem_have_uid 非零, 且 @additem_uid$ 是空字串,
	那麼可以視為這是一件新道具

使用例子:
	當 @additem_from = 1 (從地面撿取道具) 時如果道具是蘋果,
	那麼直接轉換成金幣到玩家的賬戶,
	同時在打斷之前將 @additem_halt_type 設為 0 讓地面道具消失
	
	當 @additem_from = 2 (成為 MVP 時候的獎勵道具) 的時候,
	直接將道具透過郵件傳送給玩家而不要佔用玩家揹包,
	同時在打斷之前將 @additem_halt_type 設為 0 確保道具不會掉落到地上
	
	當 @additem_from = 1 (從地面撿取道具) 時如果道具是兔耳髮飾,
	那麼等級為 100 以下的玩家禁止拾取此道具,
	同時在打斷之前將 @additem_halt_type 設為 1 確保地面道具不消失

注意事項:
	過濾器觸發之後即便沒有打斷它,
	可能還會因為超過堆疊數量等情況導致玩家無法獲得道具,
	不能將 "不打斷玩家就 100% 能獲得道具" 作為假設.
	
	當 @additem_from = 0 時候提到的: 行為不可預期
	是指道具可能會消失, 也可能會掉落到地上. 甚至有可能會出現其他故障,
	例如: 如果在 from = 0 的情況下你讓打斷處理方式為 1 (失敗) 的話,
	那麼如果剛好你去結婚, 會發現無法獲得結婚戒指.
	
	因此強烈建議不要打斷 @additem_from = 0 的情況,
	讓程式按照原來的流程走完該有的邏輯.
	
	如果你有想要區分的來源, 可以傳送請求給開發人員, 我們會新增.

不適用的場景:
	- 從郵件附件中提取道具不會觸發此過濾器事件

--------------------------------------------------------------

OnPCGoldTimerOpenFilter:

當玩家開啟 Gold PC 線上積分定時器圖示時觸發過濾器

事件關聯:
	關聯到點選圖示的玩家

中斷說明:
	中斷後服務端會無視本次 Gold PC 圖示的點選請求

攜帶引數:
	@goldpc_npcname$			不打斷的話會開啟的動態 NPC 名稱
								預設的動態 NPC 名稱是: GOLDPCCAFE
								可以調整變數的值來指向其他的 NPC
								但 NPC 的名字長度不能超過 50 個字元

使用提示:
	若你想改變開啟的 NPC 名字, 只需要傳 :: 後面的 NPC 唯一名稱即可.
	例如你的 NPC 叫: 特別積分兌換人員::SPECIALREDEEMER
	那麼只需要將 @goldpc_npcname$ = "SPECIALREDEEMER"; 即可完成指定
	
	需要注意的是, 被指定的 NPC 必須是存在具體座標的, 例如:
	prontera,150,150,4	script	某個NPC::SPECIALREDEEMER	123,{
		//..
	}
	而不能使用浮動座標(或者說不指定座標) 否則會召喚不出來 NPC, 例如:
	-	script	某個NPC::SPECIALREDEEMER	123,{
		//..
	}

	如果你想讀取當前玩家的線上積分點數, 可以直接使用: Goldpc_Points
	例如: dispbottom "當前點數 = " + Goldpc_Points;


//============================================================
// 熊貓模擬器 - 實時事件
//============================================================
// 實時事件一旦觸發會被立刻執行! 哪怕玩家正在和 NPC 對話,
// 也不會被壓入事件佇列暫緩執行.
// 
// 實時事件預設禁止使用[需要等待玩家進行後續動作]的指令:
// mes, next, close, close2, menu, select, prompt, input,
// openstorage, guildopenstorage, produce, cooking, birthpet,
// callshop, sleep, sleep2, openmail, openauction, progressbar,
// buyingstore, makerune, opendressroom, openstorage2
//
// 若您知道可能潛在的副作用且堅持需要使用上述任何一個指令,
// 可以使用 'unlockcmd' 指令碼指令來解鎖限制.
// 
// 任何實時事件觸發時都將自動攜帶 @interrupt_npcid 引數,
// 作者可以透過 @interrupt_npcid 引數來獲取當前實時事件觸發時
// 玩家正在與哪個 NPC 對話 (遊戲單位編號).
// 值為 0 表示沒有打斷玩家, 那你可以隨意使用 mes 等指令.
//============================================================

*OnPCStatCalcEvent:

當角色能力被重新計算時觸發事件.

能力重算的場景包括: 變更角色的六維素質點, 穿戴或脫下裝備, 
改變當前所在地圖, 登入遊戲, 基礎或職業等級變化等等.

常規用法:
	可以在這個事件的觸發程式碼中, 編寫一些裝備常用的指令碼.
	例如: 當基礎等級被 10 整除的時候, 六維屬性全部增加當前等級 / 10 的整數
	
	if (BaseLevel % 10 == 0) {
		bonus bAllStats, BaseLevel / 10;
	}

事件名稱:
	事件名稱之所以沒有用 Express 結尾是出於相容考慮.

--------------------------------------------------------------

*OnPCProgressAbortExpress:

當玩家的進度條被打斷後觸發實時事件

事件關聯:
	關聯到進度條被打斷的玩家

攜帶引數:
	@abort_npc_id		被中斷的進度條是哪個 NPC 編號提供的
	@abort_timeout		若進度條不被中斷時走到 100% 的具體時間戳

注意事項:
	- 該事件預設不會觸發, 您需要使用 settrigger 指令碼指令設定一下
	- 關於 settrigger 指令碼指令的用法請查閱 doc/pandas_script_commands.txt

修訂記錄:
	v1.1.1	- 從 OnPCProgressAbortEvent 改成 OnPCProgressAbortExpress
			- 增加 @abort_npc_id 和 @abort_timeout 攜帶引數

--------------------------------------------------------------

*OnPCBuffStartExpress:

事件描述:
	當玩家成功獲得一個狀態(Buff)後觸發實時事件

事件關聯:
	關聯到獲得狀態的玩家

攜帶引數:
	@started_sc_id		該狀態的編號
	@started_sc_rate	該狀態的觸發機率(10000 = 100%)
	@started_sc_tick	該狀態的持續時長(單位為毫秒)
						時長根據內部實現方式的不同, 有可能是指多長時間後剩餘秒數減一
	@started_sc_val1	該狀態的第1個引數的值
	@started_sc_val2	該狀態的第2個引數的值
	@started_sc_val3	該狀態的第3個引數的值
	@started_sc_val4	該狀態的第4個引數的值

注意事項:
	若 @started_sc_tick 為 -1 則表示該狀態無限時長

--------------------------------------------------------------

*OnPCBuffEndExpress:

事件描述:
	當玩家成功解除一個狀態(Buff)後觸發實時事件

事件關聯:
	關聯到解除狀態的玩家

攜帶引數:
	@ended_sc_id		該狀態的編號

--------------------------------------------------------------

*OnPCEnterMapExpress:

事件描述:
	當玩家進入或者改變地圖時觸發實時事件

事件關聯:
	關聯到進入或者改變地圖的玩家

攜帶引數:
	@frommap_id		來源地圖編號, 為 0 則表示玩家剛登入
	@frommap_name$	來源地圖的名稱
	@frommap_x		來源地圖的起飛 x 座標
	@frommap_y		來源地圖的起飛 y 座標
	
	@tomap_id		目標地圖編號
	@tomap_name$    目標地圖的名稱
	@tomap_x		目標地圖的落地 x 座標
	@tomap_y		目標地圖的落地 y 座標

注意事項:
	當 @frommap_id 為 0 時, @frommap_name$ 為空字串

--------------------------------------------------------------

*OnUnitKillExpress:

事件描述:
	當某個單位被擊殺時觸發實時事件
	當前支援觸發的單位型別有: 玩家\魔物\生命體\傭兵\元素精靈
	
	寵物和 NPC 不會被擊殺死亡, 因此不會觸發此事件.
	
	生命體被安息, 元素精靈超時自動銷燬或被精靈控制技能解散,
	傭兵被解僱或逃跑都不是死亡, 因此不會觸發此事件.

事件關聯:
	不關聯到任何玩家

攜帶引數:
	$@killed_gid		死亡單位的遊戲單位編號
	$@killed_type		死亡單位的型別
	$@killed_classid	死亡單位的種類編號 (魔物編號\生命體編號等等)
	$@killed_mapid		死亡單位所在的地圖編號
	$@killed_mapname$	死亡單位所在的地圖名稱
	$@killed_x			死亡單位所在的 X 座標
	$@killed_y			死亡單位所在的 Y 座標
	
	$@killer_gid		最後一擊殺手單位的遊戲單位編號 (若為 0 則表示被系統擊殺)
	$@killer_type		最後一擊殺手單位的型別 (若為 0 則表示被系統擊殺)
	$@killer_classid	最後一擊殺手單位的種類編號 (魔物編號\生命體編號等等)
	$@killer_mapid		最後一擊殺手單位所在的地圖編號
	$@killer_mapname$	最後一擊殺手單位所在的地圖名稱
	$@killer_x			最後一擊殺手單位所在的 X 座標
	$@killer_y			最後一擊殺手單位所在的 Y 座標
	$@killer_skillid	最後一擊使用的技能編號 (若為 0 則表示普通攻擊)

系統擊殺:
	是指透過 @killmonster 等指令將全地圖魔物擊殺時,
	魔物不是被另外一個單位透過攻擊殺死, 這種死亡方式稱之為被系統擊殺.

提示資訊:
	若單位是被某個玩家擊殺的話, 您可以手動關聯到殺手單位.

注意事項:
	由於此事件不關聯到任何玩家,
	因此攜帶引數的變數都變成了 $@ 開頭的地圖伺服器臨時變數,
	而不是用 @ 開頭的角色臨時變數, 使用時要注意區分

--------------------------------------------------------------

*OnMobDropItemExpress:

當魔物即將掉落 db/item_properties.yml 中將 ExecuteMobDropExpress 標記
設定為 true 的道具時觸發實時事件.

事件關聯:
	不關聯到任何玩家

攜帶引數:
	$@mobdrop_gid			即將掉落道具的魔物的遊戲單位編號
	$@mobdrop_mobid			即將掉落道具的魔物編號
	$@mobdrop_itemid		即將掉落道具的編號
	$@mobdrop_rate			即將掉落道具在應用諸多修正後的最終掉率
	$@mobdrop_mapname$		掉落道具魔物所在的地圖名稱
	
	$@mobdrop_from			道具的詳細掉落來源, 用於幫助指令碼進行更詳細的判斷
	
							0 - 未知的掉落來源 (通常情況下不應該存在此情況)
							1 - 配置在 mob_db 中會掉落的普通道具
							2 - 魔物死亡掉落的礦石, 礦石掉率在 finding_ore_rate 戰鬥配置選項中指定
							3 - 使用 bonus 指定玩家擊敗魔物會掉落的道具 (如: bAddMonsterDropItem)
							4 - 之前魔物拾取的道具, 這類道具 100% 掉落 (比如波利吃掉的道具)
							5 - 配置在 mob_db 中會掉落的 MVP 獎勵道具 (直接掉落到玩家揹包)
							
	$@mobdrop_killerrid		給魔物最後一擊的玩家遊戲單位編號 (為 0 表示被系統擊殺)
	$@mobdrop_belongrid		道具歸屬玩家的遊戲單位編號 (為 0 表示無歸屬)
	$@mobdrop_bypass		是否跳過掉落此道具 (為 0 表示正常掉落, 為 1 表示不掉落)

系統擊殺:
	是指透過 @killmonster 等指令將全地圖魔物擊殺時,
	魔物不是被另外一個單位透過攻擊殺死, 這種死亡方式稱之為被系統擊殺.
	
提示資訊:
	若想根據最後一擊玩家的某些變數來判斷是否掉落道具,
	可以在確認 $@mobdrop_killerrid 非 0 的情況下使用 attachrid 指令
	與 $@mobdrop_killerrid 的玩家進行手動關聯.
	
注意事項:
	由於此事件不關聯到任何玩家,
	因此攜帶引數的變數都變成了 $@ 開頭的地圖伺服器臨時變數,
	而不是用 @ 開頭的角色臨時變數, 使用時要注意區分

--------------------------------------------------------------

*OnPCAttackExpress:

當玩家發起攻擊並即將進行結算時觸發實時事件 [聽風]

事件關聯:
	關聯到觸發攻擊行為的玩家
	如果是寵物/生命體/傭兵/元素則直接關聯到其主人

攜帶引數:
	@attack_src_type			攻擊者的型別
	@attack_src_gid				攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)

	@attack_target_type			被攻擊者的型別
	@attack_target_gid			被攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)
	@attack_target_mobid		被攻擊者的魔物編號 (若是不是魔物則返回 0)

	@attack_damage_flag			本次攻擊的傷害型別 (位運算)
		按攻擊範圍:
			BF_SHORT:			近距離攻擊
			BF_LONG:			遠距離攻擊
		按攻擊型別:
			BF_WEAPON:			武器攻擊
			BF_MAGIC:			魔法攻擊
			BF_MISC:			混合攻擊
		按技能型別:
			BF_NORMAL:			普通攻擊
			BF_SKILL:			技能攻擊
		
		例子:
		----------------
		if ((@attack_damage_flag & BF_MAGIC) == BF_MAGIC) {
			dispbottom "我發起了一次魔法攻擊";
		}
		
		if ((@attack_damage_flag & (BF_MAGIC|BF_LONG)) == (BF_MAGIC|BF_LONG)) {
			dispbottom "我發起了一次遠距離魔法攻擊";
		}
		
	@attack_damage_skillid		本次攻擊使用的技能編號 (若為 0 則表示普通攻擊)
	@attack_damage_skilllv		本次攻擊使用的技能等級
	@attack_damage_right		本次攻擊右手武器造成的傷害值 (該值可被修改)
	@attack_damage_left			本次攻擊左手武器造成的傷害值 (該值可被修改)

注意事項:
	只有即將發生傷害時才會觸發此事件, 若為 MISS 則不觸發此事件.
	
	假如攻擊者和被攻擊者都是玩家, 並且在伺服器中除了使用 OnPCHarmedExpress 之外
	還使用到了 OnPCAttackExpress 事件, 兩個事件都對傷害進行調整的情況下,
	原始傷害會先經過被攻擊者的 OnPCHarmedExpress 事件處理,
	再將 OnPCHarmedExpress 修改後的傷害, 發給攻擊者的 OnPCAttackExpress 事件處理.

效能警告:
	全服建議最多隻有一個 NPC 負責處理此事件.
	全服線上玩家的任意一次實際造成傷害的攻擊都將觸發此事件,
	因此請不要在事件中進行耗時操作.

--------------------------------------------------------------

*OnPCReflectExpress:

當玩家對傷害進行反射時觸發實時事件

事件關聯:
	關聯到反射來源玩家
	比如 A 攻擊 B, 觸發 B 的反射使 A 得到反射傷害, 那麼觸發者是 B
	如果是寵物/生命體/傭兵/元素則直接關聯到其主人

攜帶引數:
	以下的 [攻擊者] 全部是指傷害來源, 也就是 B 玩家; [被攻擊者] 是指反射傷害的目標, 也就是 A 玩家.
	
	@reflect_src_type				攻擊者的型別
	@reflect_src_gid				攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)

	@reflect_target_type			被攻擊者的型別
	@reflect_target_gid				被攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)
	@reflect_target_mobid			被攻擊者的魔物編號 (若是不是魔物則返回 0)

	@reflect_trigger_dmg_flag		引起反射傷害的那次攻擊的傷害型別 (位運算)
		按攻擊範圍:
			BF_SHORT:				近距離攻擊
			BF_LONG:				遠距離攻擊
		按攻擊型別:
			BF_WEAPON:				武器攻擊
			BF_MAGIC:				魔法攻擊
			BF_MISC:				混合攻擊
		按技能型別:
			BF_NORMAL:				普通攻擊
			BF_SKILL:				技能攻擊
		
		例子:
		----------------
		if ((@reflect_damage_flag & BF_MAGIC) == BF_MAGIC) {
			dispbottom "我即將反射一次魔法攻擊";
		}
		
		if ((@reflect_damage_flag & (BF_MAGIC|BF_LONG)) == (BF_MAGIC|BF_LONG)) {
			dispbottom "我即將反射一次遠距離魔法攻擊";
		}
		
	@reflect_trigger_dmg_skillid	引起反射傷害的那次攻擊使用的技能編號 (若為 0 則表示普通攻擊)
	@reflect_trigger_dmg_skilllv	引起反射傷害的那次攻擊使用的技能等級
	@reflect_trigger_dmg_right		引起反射傷害的那次攻擊右手武器造成的傷害值 (該值在此事件中不能被修改)
	@reflect_trigger_dmg_left		引起反射傷害的那次攻擊左手武器造成的傷害值 (該值在此事件中不能被修改)
	@reflect_damage					即將進行反射的傷害值 (該值可被修改)

注意事項:
	只有即將發生反射傷害時才會觸發此事件, 若為 MISS 則不觸發此事件.
	
	反射傷害的計算過程比 OnPCAttackExpress 和 OnPCHarmedExpress 還要更早一些.
	
	在反射後程式還會進行其他的傷害修正, 因此這裡的 @reflect_triggerdamage_right 和
	@reflect_triggerdamage_left 可能到後面的 OnPCAttackExpress 和 OnPCHarmedExpress 事件中還會發生變化.

效能警告:
	全服建議最多隻有一個 NPC 負責處理此事件.
	全服線上玩家的任意一次實際造成反射傷害的攻擊都將觸發此事件,
	因此請不要在事件中進行耗時操作.

--------------------------------------------------------------

*OnPCHarmedExpress:

當玩家受到傷害並即將進行結算時觸發實時事件 [人魚姬的思念]

事件關聯:
	關聯到受到傷害的玩家
	如果是寵物/生命體/傭兵/元素則直接關聯到其主人

攜帶引數:
	@harmed_target_type			被攻擊者的型別
	@harmed_target_gid			被攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)
	
	@harmed_src_type			攻擊者的型別
	@harmed_src_gid				攻擊者的遊戲單位編號 (若是玩家則返回賬號編號)
	@harmed_src_mobid			攻擊者的魔物編號 (若是不是魔物則返回 0)

	@harmed_damage_flag			本次攻擊的傷害型別 (位運算)
		按攻擊範圍:
			BF_SHORT:			近距離攻擊
			BF_LONG:			遠距離攻擊
		按攻擊型別:
			BF_WEAPON:			武器攻擊
			BF_MAGIC:			魔法攻擊
			BF_MISC:			混合攻擊
		按技能型別:
			BF_NORMAL:			普通攻擊
			BF_SKILL:			技能攻擊
		
		例子:
		----------------
		if ((@harmed_damage_flag & BF_MAGIC) == BF_MAGIC) {
			dispbottom "我受到了一次魔法攻擊";
		}
		
		if ((@harmed_damage_flag & (BF_MAGIC|BF_LONG)) == (BF_MAGIC|BF_LONG)) {
			dispbottom "我受到了一次遠距離魔法攻擊";
		}
		
	@harmed_damage_skillid		本次攻擊使用的技能編號 (若為 0 則表示普通攻擊)
	@harmed_damage_skilllv		本次攻擊使用的技能等級
	@harmed_damage_right		本次攻擊右手武器造成的傷害值 (該值可被修改)
	@harmed_damage_left			本次攻擊左手武器造成的傷害值 (該值可被修改)

注意事項:
	只有即將發生傷害時才會觸發此事件, 若為 MISS 則不觸發此事件.
	
	假如攻擊者和被攻擊者都是玩家, 並且在伺服器中除了使用 OnPCHarmedExpress 之外
	還使用到了 OnPCAttackExpress 事件, 兩個事件都對傷害進行調整的情況下,
	原始傷害會先經過被攻擊者的 OnPCHarmedExpress 事件處理,
	再將 OnPCHarmedExpress 修改後的傷害, 發給攻擊者的 OnPCAttackExpress 事件處理.

效能警告:
	全服建議最多隻有一個 NPC 負責處理此事件.
	全服線上玩家的任意一次實際造成傷害的攻擊都將觸發此事件,
	因此請不要在事件中進行耗時操作.

--------------------------------------------------------------

*OnPCMerCallExpress:

當玩家成功召喚出傭兵時觸發實時事件 [HongShin]

事件關聯:
	關聯到召喚傭兵的玩家

攜帶引數:
	@mer_gid					傭兵的遊戲單位編號
	@mer_classid				傭兵的種類編號
	@mer_lifetime				傭兵的持續存在時間 (單位為毫秒)

	@mer_mapid					傭兵所在的地圖編號
	@mer_mapname$				傭兵所在的地圖名稱
	@mer_x						傭兵所在的 X 座標
	@mer_y						傭兵所在的 Y 座標

注意事項:
	若傭兵由於各種原因沒有被召喚成功, 則不會觸發此事件.

--------------------------------------------------------------

*OnPCMerLeaveExpress:

當傭兵離開玩家時觸發實時事件 [HongShin]

事件關聯:
	關聯到傭兵的主人玩家

攜帶引數:
	@mer_gid					傭兵的遊戲單位編號
	@mer_classid				傭兵的種類編號
	@mer_leave_reason			傭兵的離開方式或原因

								0 - 因持續時間到期而離開
								1 - 因傭兵死亡而離開
								2 - 因玩家將傭兵解僱而離開
								3 - 因傭兵逃跑而離開 (玩家死亡導致)

	@mer_mapid					傭兵所在的地圖編號
	@mer_mapname$				傭兵所在的地圖名稱
	@mer_x						傭兵所在的 X 座標
	@mer_y						傭兵所在的 Y 座標

--------------------------------------------------------------

*OnPCTalkExpress:

當玩家往聊天框傳送資訊時觸發實時事件 [人魚姬的思念]

事件關聯:
	傳送訊息的玩家

攜帶引數:
	@talk_gid				聊天玩家的遊戲單位編號
	@talk_mapid				聊天玩家所在的地圖編號
	@talk_mapname$			聊天玩家所在的地圖名稱
	@talk_x					聊天玩家所在的 X 座標
	@talk_y					聊天玩家所在的 y 座標

	@talk_name$				聊天玩家的名字 (若使用 fakename 假名, 則會尊重它)
	@talk_mes$				聊天玩家的內容

注意事項:
	此事件無法捕獲玩家輸入的 GM 指令或 / 開頭的客戶端指令

--------------------------------------------------------------

*OnPCStorageClosedExpress:

當玩家成功關閉倉庫後觸發實時事件

事件關聯:
	關閉倉庫的玩家

攜帶引數:
	@closed_storage_type	關閉的倉庫型別

							0 - 個人倉庫
							1 - 公會倉庫
							2 - 擴充倉庫

	@closed_storage_id		關閉的倉庫編號 (只對擴充倉庫有意義)

--------------------------------------------------------------

*OnBfReloadScriptExpress:

當即將重新整理全部 NPC 指令碼時觸發實時事件

事件關聯:
	關聯到每一個線上的玩家

提示資訊:
	全服線上玩家都完成該事件之後, 才會重新整理 NPC 指令碼.
	該事件會關聯到每個玩家並分別觸發一次.

--------------------------------------------------------------

*OnAfReloadScriptExpress:

當完成重新整理全部 NPC 指令碼時觸發實時事件

事件關聯:
	關聯到每一個線上的玩家

提示資訊:
	當重新整理 NPC 指令碼完成後, 才會為全服玩家觸發該事件.
	該事件會關聯到每個玩家並分別觸發一次.

注意事項:
	包含該事件的指令碼檔案必須被放到 reloadscript 時能
	被重新載入的範圍內, 否則若只是用 reloadnpc 臨時載入該指令碼,
	那麼重新整理後會將不會觸發該事件.

--------------------------------------------------------------

*OnPCRefineItemExpress:

當玩家成功調整物品的精煉等級後觸發實時事件

事件關聯:
	調整了物品精煉等級的玩家

攜帶引數:
	@refine_action			精煉動作型別

							0 - 精煉成功
							
								透過 successrefitem 指令碼指令
								透過精煉互動介面精煉成功
								
							1 - 精煉失敗, 裝備消失
							
								透過 failedrefitem 指令碼指令
								透過精煉互動介面精煉失敗, 裝備消失
							
							2 - 精煉失敗, 精煉降級
							
								透過 downrefitem 指令碼指令
								透過精煉互動介面精煉失敗, 精煉降級
								透過精煉互動介面精煉失敗, 但是被鐵匠的祝福保級
							
							3 - 透過 @refine 管理員指令
							
							4 - 透過 setinventoryinfo 指令碼指令
	
	@refine_idx				精煉物品的道具揹包序號
	@refine_nameid			精煉物品的道具編號
	@refine_current			精煉物品的最新的精煉等級
	@refine_offset			本次精煉該裝備實際增減的精煉等級是多少
							
							動作型別為 1 時該值固定為 0
							假如某裝備的精煉等級為 3, 但是 downrefitem 要求它
							下降 5 級精煉值, 那麼該變數將返回 -3

	@refine_blessing		精煉時消耗 "鐵匠的祝福" 的數量 (為 0 表示沒有使用)
							該引數僅在使用精煉互動介面時才有效

注意事項:
	若使用 @refine 對全身裝備的精煉等級調整,
	那麼身上每一件裝備的精煉等級被調整後都會觸發該事件.
	
	透過記住原先物品的全部資訊, 再使用 getitem 系列指令重新建立
	新道具所調整的精煉等級不會觸發此實時事件事件.

--------------------------------------------------------------

*OnPCCaptchaPunExpress:

當驗證失敗後用於執行懲罰的實時事件

事件關聯:
	即將被懲罰的玩家

攜帶引數:
	@captcha_punishment_reason	懲罰的原因
								0 - 驗證碼輸入超時
								1 - 驗證碼輸入錯誤
								2 - 沒輸入完成驗證碼就離線

提示資訊:
	OnPCCaptchaSubmitFilter 事件的引數在這裡依然能繼續讀到,
	但那些可以透過修改變數改變行為的功能就無效了,
	例如: 在這個事件裡還想修改 @captcha_punishment_time 來嘗試
	調整懲罰時間是不行的 (也用不上).

注意事項:
	這個事件預設並不會被觸發, 你有以下兩種方式可以讓他觸發:

	- 在 conf/battle/client.conf 中將 macro_detection_punishment
	  選項的值調整為 2 (將懲罰具體細節交給本事件處理)

	- 在 OnPCCaptchaSubmitFilter 時間中透過修改
	  @captcha_punishment_type 引數的值為 2 來表示懲罰交給本事件處理

--------------------------------------------------------------

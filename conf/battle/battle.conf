//--------------------------------------------------------------
// 熊貓模擬器戰鬥配置選項
// 最初的翻譯由 Peter Kieser <pfak@telus.net> 完成
// 由 Ancyker 改寫成純英文, 由熊貓模擬器開發團隊進行漢化
//--------------------------------------------------------------
//   開關選項: 可以用 on/off, yes/no 或 1/0 來表示開關
// 百分比選項: 填寫 100 即表示 100%
//   掩碼選項: 沒有特殊說明的情況下, 預設用來表示遊戲中各單位的型別
//             ------------------------------------
//             | 十六進位制  |  十進位制  |  對應單位 |
//             | 0x001     |  1       |  玩家     |
//             | 0x002     |  2       |  魔物     |
//             | 0x004     |  4       |  寵物     |
//             | 0x008     |  8       |  生命體   |
//             | 0x010     |  16      |  傭兵     |
//             | 0x080     |  128     |  NPC      |
//             | 0x200     |  512     |  元素精靈 |
//             ------------------------------------
//             掩碼選項一個數值可以表示裡面有多個內容. 
//             例如: 若想表示玩家和寵物, 只需填寫 5 即可 (1 + 4)
//             掩碼選項支援的填寫格式有兩種: 分別是十六進位制和十進位制,
//             若您填寫十六進位制則需要用 0x 作為數值的開頭
//--------------------------------------------------------------

// 復興前模式下哪些單位能擁有基礎攻擊值? [掩碼選項]
// 這些單位能夠讓它自身的 Str 屬性影響到它輸出的傷害
//
// 預設值為: 9, 表示包含: 玩家(1) + 生命體(8)
enable_baseatk: 9

// 復興後模式下哪些單位能擁有基礎攻擊值? [掩碼選項]
// 這些單位能夠讓它自身的 Str 屬性影響到它輸出的傷害
//
// 預設值為: 0x29F, 表示包含: 全部單位
enable_baseatk_renewal: 0x29F

// 哪些單位能夠掌握完全迴避? [掩碼選項]
// 注意: 能掌握不代表它已經會, 只能表示它能會.
//
// 預設值為: 1, 表示包含: 玩家(1)
enable_perfect_flee: 1

// 哪些單位能夠產生暴擊? [掩碼選項]
// 注意: 有些技能會無視此設定, 該暴擊的時候還是會暴擊
//
// 預設值為: 17, 表示包含: 玩家(1) + 傭兵(16)
enable_critical: 17

// 魔物產生暴擊的倍率 [百分比選項]
// 預設值為: 100
mob_critical_rate: 100

// 除了玩家和魔物外其他單位產生暴擊的倍率 [百分比選項]
// 其他單位是指如: 寵物、生命體、傭兵、元素精靈
//
// 預設值為: 100
critical_rate: 100

// 哪些單位在發起攻擊後會有移動延遲? [掩碼選項]
// 
// 沒有移動延遲的單位將在攻擊發起之後立刻就可以移動,
// 在這種情況下攻擊動畫過程和移動動畫過程會被客戶端省略,
// 可能會產生攻擊動畫沒播放完畢的情況
// 
// 擁有移動延遲的單位只有攻擊動畫播放結束了才能夠進行移動
// "移動延遲" 的時間長度通常等同於單位的 "攻擊動畫" 持續時間
//
// 移動延遲:
// 英文是 Move-Delay. 是指發起某個動作 (例如攻擊動作) 後,
// 必須等待多久才能進行移動的這個 "禁止移動" 時間段.
//
// 預設值為: 15, 表示包含: 玩家(1) + 魔物(2) + 寵物(4) + 生命體(8)
attack_walk_delay: 15

// 玩家單位被擊中後的移動延遲倍率 [百分比選項]
// 
// 注意: 此選項隻影響 "單段式攻擊" (例如: 狂擊) 
// 以及 "多段式攻擊" (例如: 怒雷強擊) 第一擊的移動延遲時間.
// 對於 "多段式攻擊" 追加的移動延遲調整請見 multihit_delay 選項
//
// 預設值為: 20
pc_damage_walk_delay_rate: 20

// 非玩家單位被擊中後的移動延遲倍率 [百分比選項]
// 
// 注意: 此選項隻影響 "單段式攻擊" (例如: 狂擊) 
// 以及 "多段式攻擊" (例如: 怒雷強擊) 第一擊的移動延遲時間.
// 對於 "多段式攻擊" 追加的移動延遲調整請見 multihit_delay 選項
//
// 預設值為: 100
damage_walk_delay_rate: 100

// 多段式攻擊每一擊追加的移動延遲 (單位為毫秒)
//
// 當玩家或者魔物被 "怒雷強擊" 這樣的多段式攻擊命中時,
// 除了第一擊的移動延遲之外, 還會額外追加:
// multihit_delay * (攻擊段數 - 1) 的 "多段式攻擊延遲" 
// 
// 預設值為: 80 毫秒
multihit_delay: 80

// 玩家單位被攻擊後的延遲倍率 [百分比選項]
// 設定為 0 的話玩家將擁有類似 "霸體" 類似的效果
//
// 預設值為: 100
player_damage_delay_rate: 100

// 判斷某單位屬於不死型別的依據是什麼?
//
// 0 = 該單位擁有不死屬性 (ELE_UNDEAD)
// 1 = 該單位屬於不死種族 (RC_UNDEAD)
// 2 = 以上任意一個成立就算
//
// 預設值為: 0 (擁有不死屬性)
undead_detect_type: 0

// 當攻擊屬性與目標的防禦屬性相同時,
// 是否會放棄傷害轉而變成幫目標恢復血量? [開關選項]
// 
// 若啟用此選項, 穿戴火鱗盔甲 (物品編號: 2344) 的情況下
// 被 "火箭術" 攻擊, 造成的傷害會變成幫目標回血
//
// 預設值為: no
attribute_recover: no

// 普通攻擊的最小命中率是多少? [百分比選項]
// 預設值為: 5
min_hitrate: 5

// 普通攻擊的最大命中率是多少? [百分比選項]
// 預設值為: 100
max_hitrate: 100

// 被多少個敵人圍攻時開始觸發迴避率懲罰?
// 預設值為: 3
agi_penalty_count: 3

// 當被 agi_penalty_count 個敵人圍攻時,
// 使用哪種方式對被攻擊者的迴避率進行減算懲罰?
// 
// 0 = 不減少迴避率
// 
// 1 = 減少 agi_penalty_num 選項指定百分比的迴避率
//
//     例如: 當 agi_penalty_num 填寫 10, 則參與圍攻的攻擊者在
//           超過 agi_penalty_count 設定的數量之後,
//           每增加一個攻擊者, 被攻擊者就會降低 10% 的迴避率
//
// 2 = 減少 agi_penalty_num 選項指定數值的迴避率
//
//     例如: 當 agi_penalty_num 填寫 20, 則參與圍攻的攻擊者在
//           超過 agi_penalty_count 設定的數量之後,
//           每增加一個攻擊者, 被攻擊者就會降低 20 點回避率
//
// 在現實生活中如果您動作很靈敏, 和一個人打架時您可以輕鬆迴避的話,
// 那麼當您以一敵十的時候, 您的迴避率肯定是會降低的...
// 
// 當玩家被很多魔物圍攻的時候, 玩家的迴避率也會相應減少.
// 
// 預設值為: 1
agi_penalty_type: 1

// 當迴避率懲罰機制被啟用時, 
// 哪種型別的單位會受到該機制的影響? [掩碼選項]
// 
// 預設值為: 1, 表示包含: 玩家(1)
agi_penalty_target: 1

// 當觸發迴避率懲罰機制後, 
// 每增加一個敵人, 被攻擊者會降低多少迴避率?
//
// 當 agi_penalty_type 為 1 時: 表示減少的迴避率百分比
// 當 agi_penalty_type 為 2 時: 表示減少具體的迴避率數值
// 
// 預設值為: 10
agi_penalty_num: 10

// 被多少個敵人圍攻時開始觸發物理防禦力懲罰?
// 預設值為: 3
vit_penalty_count: 3

// 當被 vit_penalty_count 個敵人圍攻時,
// 使用哪種方式對被攻擊者的物理防禦力進行減算懲罰?
// 
// 0 = 不減少物理防禦力
// 
// 1 = 減少 vit_penalty_num 選項指定百分比的物理防禦力
//
//     例如: 當 vit_penalty_num 填寫 10, 則參與圍攻的攻擊者在
//           超過 vit_penalty_count 設定的數量之後,
//           每增加一個攻擊者, 被攻擊者就會降低 10% 的物理防禦力
//
// 2 = 減少 vit_penalty_num 選項指定數值的物理防禦力
//
//     例如: 當 vit_penalty_num 填寫 20, 則參與圍攻的攻擊者在
//           超過 vit_penalty_count 設定的數量之後,
//           每增加一個攻擊者, 被攻擊者就會降低 20 點物理防禦力
//
// 此處的物理防禦力特指 VIT 素質所帶來的那部分防禦力
// 
// 預設值為: 1
vit_penalty_type: 1

// 當物理防禦力懲罰機制被啟用時, 
// 哪種型別的單位會受到該機制的影響? [掩碼選項]
// 
// 預設值為: 1, 表示包含: 玩家(1)
vit_penalty_target: 1

// 當觸發物理防禦力懲罰機制後, 
// 每增加一個敵人, 被攻擊者會降低多少物理防禦力?
//
// 當 vit_penalty_type 為 1 時: 表示減少的物理防禦力百分比
// 當 vit_penalty_type 為 2 時: 表示減少具體的物理防禦力數值
// 
// 預設值為: 5
vit_penalty_num: 5

// 是否採用替代演算法來處理
// 受到物理攻擊時根據物理防禦力進行傷害減算的過程
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 復興後模式下 (Renewal)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 面板中 + 左側的值是素質防禦 (sDEF)
// 面板中 + 右側的值是裝備防禦 (eDEF)
//
// 最終傷害 = 攻擊傷害值 * (4000+eDEF) / (4000+eDEF*10) - sDEF
//
// 設定為 0 的時候:
//     表示不使用替代演算法
//
// 設定為 1 或更大值的時候:
//     使用替代演算法來進行傷害減算
//     裝備防禦(eDEF) x 此項配置值, 然後直接將其加入素質防禦(sDEF)
//
//     假定面板中 Def 的顯示是: 10 + 50
//     其中的 10 是素質防禦(sDEF), 50 是裝備防禦(eDEF)
//
//     假定此選項為 2 的情況下:
//     sDEF(10) + eDEF(50) 會先變成 sDEF(10 * 2 + 50) + eDEF(0)
//     然後再套用上面提到的 [最終傷害] 計算公式.
//
//     也就是說: 裝備防禦(eDEF)將會融入到素質防禦(sDEF)
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 復興前模式下 (Pre-Renewal)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 面板中 + 左側的值是裝備防禦 (def1 乘算值)
// 面板中 + 右側的值是素質防禦 (def2 減算值, 通常就是 VIT 的值)
//
// 注意事項:
// 復興前與復興後 Def 面板中 + 左右的數值含義左右互換
//
// 設定為 0 的時候:
//     表示不使用替代演算法
//
// 設定為 1 或更大值的時候:
//     使用替代演算法來進行傷害減算
//     裝備防禦(def1) x 此項配置值, 然後直接將其加入素質防禦(def2)
//
//     假定面板中 Def 的顯示是: 10 + 50
//     其中的 10 是裝備防禦(def1), 50 是素質防禦(def2)
//
//     假定此選項為 2 的情況下:
//     首先素質防禦(def2)會先經過以下公式進行調整和修正:
//     def2 = [VIT*0.3] + RND(0, [VIT^2/150] - [VIT*0.3] - 1) + [VIT*0.5]
//     然後裝備防禦(def1) x 此項配置值, 追加到 def2 裡面:
//     def2 = def2 + 10 x 2
//     最後將裝備防禦(def1)視為 0, 再繼續進行防禦減傷計算.
//
//     也就是說: 裝備防禦(def1)將會融入到素質防禦(def2)裡面去
//
// 預設值為: 0
weapon_defense_type: 0

// 是否採用替代演算法來處理
// 受到魔法攻擊時根據魔法防禦力進行傷害減算的過程
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 復興後模式下 (Renewal)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 此選項在復興後模式下不適用, 配置與否不會有任何影響
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 復興前模式下 (Pre-Renewal)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 面板中 + 左側的值是裝備防禦 (mdef)
// 面板中 + 右側的值是素質防禦 (mdef2)
//     其中 mdef2 雖然在面板中看起來的值跟 INT 一致,
//     但其實在記憶體中 mdef2 = INT + (VIT / 2),
//     只是將數值傳送客戶端面板的時候又減掉了 (VIT / 2).
//
//     因此進行防禦減傷運算的時候,
//     是以 INT + (VIT / 2) 作為 mdef2 來代入計算的.
//
// 設定為 0 的時候:
//     表示不使用替代演算法
//     最終傷害 = 攻擊傷害值 * (100-mdef) / 100 - mdef2
//
// 設定為 1 或更大值的時候:
//     使用替代演算法來進行傷害減算
//     最終傷害 = 攻擊傷害值 - (mdef * 此項配置值) - mdef2
//
//     假定面板中 Mdef 的顯示是: 10 + 18
//     其中的 10 是裝備防禦(mdef), 18 是素質防禦(mdef2)
//     同時假定 VIT 是 16 + 5 = 21 的情況下,
//     參與運算的 mdef2 實際 = 18 + (21 / 2) = 28
//
//     假定此選項為 2 的情況下:
//     最終傷害 = 攻擊傷害值 - (10 * 2) - 28
//
// 預設值為: 0
magic_defense_type: 0

// 哪些單位會在每次攻擊時使自己朝向對手? [掩碼選項]
//
// 在官方伺服器上像 "火焰之壁" 這種具備擊退能力的技能
// 在計算擊退方向的時候, 總是基於目標最後移動的方向進行反向擊退.
// 
// 施展 "火焰之壁" 的攻擊者在多個完全不同的方向發起攻擊,
// 被擊退的單位的擊退方向也不會發生任何改變.
//
// 例如: 你正在向北移動, 此時你面朝北方背後是南方.
// 然後位於你東邊的某另一個敵人在你腳下丟了個 "火焰之壁",
// 此時你還是會被擊退到南方.
//
// 無法移動的魔物 (例如: "曼陀羅魔花")
// 永遠會被擊退到南方, 因為它們生成的時候預設面朝北方.
//
// 若此選項的值表示包含 2 (魔物),
// 那麼你再用 "火焰之壁" 去攻擊 "曼陀羅魔花" 的時候,
// 由於 "曼陀羅魔花" 會在對你發起攻擊的時候,
// 因為會此選項的關係先面朝你, 因此你的 "火焰之壁" 會將
// 它往遠離你的地方擊退 (而不是固定擊退到南方).
//
// 預設值為: 0
attack_direction_change: 0

// 哪些單位的普通攻擊不受到屬性修正影響? [掩碼選項]
// 它們普通攻擊其他單位時, 造成的傷害不會受到屬性修正的影響.
//
// 該設定可以賦予非玩家單位使用
// 普通攻擊來對幽靈屬性的目標造成全額傷害的能力.
// 
// 預設值為: 14, 表示包含: 魔物(2) + 寵物(4) + 生命體(8)
attack_attr_none: 14

// 裝備的基礎損壞率 (萬分比選項)
// 調整該值可以直接提高各種裝備損壞的基礎機率.
// 注意: 設為 1 = 0.01% 損壞率.
// 
// 預設值為: 0
equip_natural_break_rate: 0

// 自身裝備損壞倍率 [百分比選項]
// 此選項會影響 "兇砍" 和 "野蠻兇砍" 的自身裝備損壞機率
//
// 通常公式大致如下:
// 損壞率 = (裝備的基礎損壞率 + 各技能對裝備損壞率 - 部分
//           效果調整器的損壞機率調整) * 該選項的倍率
//
// 只要損壞裝備的目標是自己或者隊友, 就會受到此選項影響
//
// 因此賢者的 "屬性附加" 系列技能若失敗,
// 那麼被附加的目標角色的武器損壞機率, 也會受到此選項影響.
// 
// 預設值為: 100
equip_self_break_rate: 100

// 敵人裝備損壞倍率 [百分比選項]
// 此選項會影響 "強酸攻擊" 和 "野蠻兇砍" 損壞敵人裝備的機率
//
// 只要損壞裝備的目標是敵人, 就會受到此選項影響
// 
// 預設值為: 100
equip_skill_break_rate: 100

// 武器攻擊是否延遲傷害結算? [開關選項]
// 若啟用此選項, 每次攻擊的實際傷害結算過程都會延遲 500 毫秒.
// 
// 預設值為: yes (官服預設值)
delay_battle_damage: yes

// 使用弓系武器或槍系武器時是否消耗彈藥?
// 此處的彈藥是指彈藥型別的道具, 例如: 箭矢 / 子彈 / 短刀等
//
// 0 = 不消耗彈藥
//
// 1 = 要消耗, 但尊重技能資料庫配置 (此為預設值)
//
// 2 = 強制消耗, 哪怕技能資料庫中不指定彈藥
//
//     只要這個技能是可造成傷害的、攻擊型別是 Weapon 武器傷害型別,
//     技能施法要求的武器型別是: “獵弓”、“左輪手槍”、“榴彈槍”.
//     那麼就算它不明確指定需要消耗哪種彈藥,
//     也會預設消耗 1 個任意型別的彈藥(箭矢、子彈等). 
//
//     哪怕這個技能是因為卡片效果習得的, 或是使用“抄襲、複製”技能
//     抄來的, 都會自動判斷是否需要消耗箭矢
//
// 感覺選項 2 是為了避免出現: 有些技能由於技能資料庫不完整, 從而
// 導致無需消耗箭矢而設計的嚴格選項, 通常用處不大. 
// 
// 預設值為: 1 (要消耗, 但尊重技能資料庫配置)
arrow_decrement: 0

// 當玩家脫下武器時是否同時脫下彈藥? [開關選項]
// 此處的彈藥是指彈藥型別的道具, 例如: 箭矢 / 子彈 / 短刀等
//
// 預設值為: yes (要脫下彈藥)
ammo_unequip: yes

// 裝備彈藥的時候是否檢查對應的武器型別? [開關選項]
// 此處的彈藥是指彈藥型別的道具, 例如: 箭矢 / 子彈 / 短刀等
//
// 開啟之後若彈藥型別與當前穿戴的武器型別不適配,
// 則會提示玩家彈藥裝備失敗.
//
// 預設值為: yes
ammo_check_weapon: yes

// 是否在自動詠唱技能之前先檢查施法距離? [開關選項]
// 
// 若啟用此選項, 當有技能需要被自動詠唱時,
// 會使用它在技能資料庫中定義的距離來進行判斷, 條件滿足則觸發.
//
// 舉個例子:
// 音速投擲要求在距離目標 2 格範圍內才能被髮動.
//
// 預設值為: no (官服預設值)
autospell_check_range: no

// 當攻擊者和被攻擊者的座標一致時,
// 使用擊退技能會是否會將敵人擊退到攻擊者的左側? [開關選項]
// 若設定為 no 則會退到攻擊者的背後.
//
// 預設值為: yes (官服預設值)
knockback_left: yes

// 玩家是否能夠同時召喚出獵鷹和野狼? [開關選項]
// 預設值為: no (官服預設值)
warg_can_falcon: no

// 被攻擊時是否可以透過 "弓身彈影" 來
// 快速遠離攻擊者 (10 格以上), 以此來躲避傷害? [開關選項]
// 
// 這個過程是因為延遲傷害結算導致的,
// 在官服預設值情況下 delay_battle_damage 選項的值為 yes,
// 因此每次實際傷害結算都會延遲 500 毫秒進行,
// 在這 500 毫秒內使用 "弓身彈影" 快速離開可以躲避傷害.
//
// 當設定為 yes 的話, 超過 10 格就會放棄傷害結算.
// 否則需要超過 conf/battle/client.conf 中 area_size 選項的距離
// 才能躲過傷害結算 (想在 500 毫秒內完成會很難做到).
//
// 預設值為: no
snap_dodge: no

// 是否允許技能或者物品來 "破壞" 非玩家單位的裝備? [開關選項]
//
// 若啟用此選項, 對非玩家單位 (魔物、生命體、傭兵、元素精靈等)
// 使用 "破壞裝備" 型別的技能就可以對齊施加負面效果.
// 
// 禁用此選項時, 野蠻兇砍 (WS_MELTDOWN) 技能不受此選項的限制.
//
// 預設值為: no (官服預設值)
break_mob_equip: no
